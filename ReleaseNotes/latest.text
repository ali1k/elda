+ ----------------------------------------------------------------------
| Elda 1.2.30 (DEVELOPING)

This release of Elda improves cache use in two ways;
with Expires headers and with improvements in Elda's
internal cache.

Expires Headers

If a cache expiry time is associated with an Elda
request, Elda adds the appropriate Expires: header
to the response.

A cache expiry time can be associated with a request
in the following ways in order:

* the view uses properties that have been declared
  (in the configuration file) as having an expiry
  time using `elda:cacheExpiryTime TIME`. The
  smallest such time is the associated time.
  A DESCRIBE view or a view using the * wildcard
  implicitly uses all declared properties.

* the endpoint has been given a cacheExpiryTime.
  (If it has, and it is smaller than a views
  expiry time, the endpoint time is used.)

* the API has been given a cacheExpiryTime,
  which acts as thge cacheExpiryTime for all
  endpoints that do not explicitly have one.

This allows timeouts to be given to any "volatile"
properties and these timeouts will be respected
by external caches. Item counts are also cached
with the expiry time of the query that used them.

Internal Cache

Elda's internal cache now respects the expiry times
mentioned above, rather than blindly allowing
entries to persist until the cache is emptied.
This means that Elda will age entries out even
when it is not being used behind an external cache.

(The old two-level structure of Elda's cache has also
been abandoned; the cache is keyed from the request
URI rather than their being one map from select
query to resources and another from resources+view
to results. This means that multiple formats for
"the same" query are cached independently.)

+ ----------------------------------------------------------------------
| Elda 1.2.29 (RELEASED)

* a bug in RouterRestlet meant that Elda did not recognise stylesheet
  names that were URLs (or absolute paths), and so it treated them
  as names of files that it then failed to open.

* Optionally Elda will count the total number of items that are
  selected and make this available as the value of os:totalResults
  on the page root. (The count is cached so that a count query does
  not have to be done for every page of next/prev links.) See
  the documentation on the reference page.

+ ----------------------------------------------------------------------
| Elda 1.2.28 (RELEASED)

* Elda has moved to GitHub. 

+ ----------------------------------------------------------------------
| Elda 1.2.27 (RELEASED)

* The cycle detector used by the XML renderer (and hence by the
  usual HTML renderer) turned out to have dreadful performance
  on large tangled data because it didn't mark as "done" nodes
  that it had finished with. Added a new map to CycleFinder and
  adjusted it during crawl. Also took the opportunity to rename
  methods hintingly.

* The control/clear-cache request may now be a POST, not a GET.
  The control/show-cache page has been updated with a button
  that makes such a POST. The response page for a clear-cache
  is control/show-cache; if the clear was performed using GET
  then the page warns that this was inappropriate.

+ ----------------------------------------------------------------------
| Elda 1.2.26 (RELEASED)    
 
* The documentation has been improved and restyled. It now
  includes a cribsheet with summaries of the Elda query 
  parameters and configuration properties, and additional 
  introductory materials. The text search documentation has 
  been updated. The page previously called "advanced" has 
  been renamed to "reference" and given a table-of-contents.
  The velocity renderer documentation now lives in its own
  document. Path configuaration options for stylesheets,
  HTML resouces, and Velocity templates has been clairified.

* API.java has moved packages and now lives in 
  com.epimorphics.lda.vocabularies (alongside EXTRAS and the 
  other vocabulary classes).

  Both API.java and EXTRAS.java are constructed from the corresponding 
  files in elda/vocabs by using `mvn generate-sources`. (If the Java 
  files are up-to-date no generation is done.)

* The example velocity templates and atom renderer now trap cycles in
  the view data. The example Velocity templates for Elda rendering
  have been substantially improved and documented. The use of
  api:stylesheet to specify the Velocity template to render with
  has been replace by elda:velocityTemplate to avoid confusion.

* There is limited control over where the text:query triples appear
  in the generated SELECT query -- this may be helpful to the
  remote SPARQL engine.

* The example games ontology is now published as part of Elda's
  googlecode pages. The example data has been extended.

* Term bindings (ie LDA shortnames) are rewritten according to
  the URI-renaming rules if any are present, for consistency
  with the model rewriting.

* The separate release notes for each release have been replaced
  by a single release notes document covering the latest releases
  and an attic containing older release notes. The "notelets"
  history has been abandoned. This change makes it easier for us
  to create release notes that cross-refer.

* The JSON renderer will treat a Date literal as a DateTime literal
  if its lexical form is appropriate, rather than abandoning the
  rendering with an exception and subsequent status 500.

* The long-obsolete documentation for the configuration variable
  _strip_has has been removed. Documentation for _suppress_ipto
  has been restored.

+ ----------------------------------------------------------------------
| Elda 1.2.25 (RELEASED)

* A subtle bug where some uses of JSON rendering changed
  gave the range type rdf:PlainLiteral to properties that have been
  give no type in the LDA configuration, and continued to use this
  wrong range in subsequent queries, has been fixed.

* Elda will now discard any and all query parameters that have
  been given an empty value rather than using the empty string
  as the value.

* An EXPERIMENTAL atom feed renderer has been added. For
  details see the forthcoming on-site documentation.

* The undocument and untested and historical _search query
  parameter now generates jena-text compatible queries as available
  in later versions of Fuseki. The LARQ code in Elda has been
  removed. For  details see the forthcoming on-site documentation.

+ ----------------------------------------------------------------------
| Elda 1.2.24 (RELEASED)

* Users should use Elda 1.2.24 in place of 1.2.23 to fix
  a excessive-reloading bug. Otherwise .24 is only slightly
  different from .23 and the following notes apply without
  change.

* A bug in the config-reload code that meant that Elda 1.2.23
  reloaded configs a LOT has been fixed. Users of Elda 1.2.23
  should upgrade to 1.2.24.

* Various WARN log elements have been changed to DEBUG
  or eliminated.

* The hasFormat links from the current page now preserve
  the page size & number rather than discarding them.
  The effect of this is that the formatting links on the
  XSLT-generated HTML page now link to "the same page but
  with the selected format", rather than resetting to
  the first page.

* Minor code cleanups and fixes.

+ ----------------------------------------------------------------------
| Elda 1.2.23 (USE 1.2.24 INSTEAD)

* This release of Elda has significant changes in Elda
  initialisation, configuration, and internal structure.
  Users who are upgrading their Elda MUST read these
  release notes and the Elda documentation at

   http://elda.googlecode.com/hg/docs/E1.2.23-index.html
   http://elda.googlecode.com/hg/docs/E1.2.23-advanced.html

  carefully. These changes should make future Elda updates
  easier to manage. Existing configurations (using the Elda
  Loader class) should continute to work but support for Loader
  will be dropped in a future Elda release.

  NOTE that the artifact previously known as `lda` is now
  `elda-lda` for consistency with the other elda- artifacts.

* The json-rdf module has been absorbed into Elda.  
  The Elda assets have been moved to their own module.
  An elda-common module provides an externally configurable
  war. The Elda modules are now

  For general use:
    elda-assets			scripts, stylesheets, images etc for _resourceRoot
    elda-common			externally configurable WAR file
    elda-bundled		elda-assets + elda-common
    elda-lda			elda's core code (used to be just `lda`)
    elda-standalone		self-contained configurable Elda server

  For internal use:
    elda-system-tests
    elda-testing-webapp
    elda-regress

  Developers should see 

    http://elda.googlecode.com/hg/docs/E1.2.23-advanced.html

  for a description of how to use elda-common, -assets, and -bundled.
  Existing webapps built on Elda should continue to work as the
  existing Loader configuration is still operational.

* ELDA STANDALONE. The context name for the Elda Standalone servlet is now
  "standalone", not "elda".

* Elda's specification of where config files are to be found now includes
  globbing; that is, the character * in a pathname means 0 or more non-/
  characters. Further, the character sequence {APP} is replaced by the
  context path that this Elda instance is running on. This allows
  (a) A single file to contain many configs, (b) a single context path
  to load multiple configs, and (c) a single container to run many independant
  webapps (hence configs).

* NEW CONFIGURATION SPEC. The preferred way to initialise Elda
  is for the intialSpecFile parameter to be set in a context-param
  in the web.xml and for Jersey to be installed as a filter rather
  than a servlet. See the examples in the documentation.

* XSLT stylesheets have been updated and pruned.

* AUTO-RELOAD. Whenever a new request comes into Elda and "sufficently
  long" has passed since the last check, Elda checks to see if the
  config files have changed since the last check. If so, the current
  configuration is abandoned and a new one loaded.

  The DOM cache (for compiled XSLT templates) and the Elda cache
  for the results of queries) are cleared when a reload occurs.
  Velocity does its own independant reload-on-changes.

* CACHE POLICY. Elda cache policy can be set on the whole API, not just
  on endpoints. This is mostly so that "default:0" can be set in
  a configuration to switch off the cache. 

  Elda used to always retain at least one item in its cache. This
  behaviour has been dropped.

* UNSTREAMED RENDERERS. The Turtle, JSON, and XML-driven renderers are
  no longer streaming: they compute their results early so that failures
  result in non-200 result statuses rather than producing a broken response
  body after a 200 OK header.

* SHORTNAMES. The shortname code for URIs that arrive without a
  predeclared shortname have been revised (again), see the documentation.
  The shortname style can be controlled from the formatter declaration
  in the config.

  All cases of multiple uses of the same shortname in a config are
  reported at once.

* FILE LOADING. An Elda webapp can load static files.

* SUPPRESSED PREFIXES. The Turtle and RDF/XML renderers discard prefixes
  that bind to namespaces not used in the URIs of the model.

* POMS. Some POM issues have been fixed. json-rdf has been incorporated
  into lda, which has been renamed to elda-lda.

* VELOCITY. Velocity templates loaded from configurable location. Default 
  templates now respect _resourceRoot via [].

* JENA. Elda has been updated to use Jena 2.10.1 (with TDB 0.10.1 if
  using the built-in TDB handler).

+ ----------------------------------------------------------------------
| Elda 1.2.21 (RELEASED)

* The XML renderer's changes to separate object and meta-data
  did not correctly implement the intended cycle-breaking
  algorithm, and the cycle detection code had a subtle bug
  in it. The bug has been removed and the cycle-breaking
  behaviour is a close match to that found in Elda 12/13.

* Fix bug in JSON renderer.

